---
// AnnouncementBanner.astro
import cn from "src/utils/cn";
import { APP_CONTENT } from "@/config/Content";
export interface Props {
  bgColor?: string;
  textColor?: string;
  height?: string;
  speed?: number;
}

const {
  bgColor = "bg-green-50",
  textColor = "text-green-400",
  height = "md:h-14 h-11",
  speed = 50,
} = Astro.props;
---

<section
  class={cn(
    "sticky top-0 z-50 md:py-4 py-2.5 overflow-hidden",
    bgColor,
    height,
  )}
  id="announcement-banner"
  data-speed={speed}
>
  <div class="relative flex h-full items-center">
    <div
      class={cn(
        "text-nowrap md:text-base text-sm whitespace-nowrap flex items-center",
        textColor,
      )}
      id="scroll-content"
    >
      <!-- First instance of content -->
      <span
        class="mr-8 inline-block"
        set:html={APP_CONTENT.announcementContent.join("")}
      />
      <!-- Second instance for seamless loop -->
      <span
        class="mr-8 inline-block"
        set:html={APP_CONTENT.announcementContent.join("")}
      />
    </div>
  </div>
</section>

<script>
  import { gsap } from "gsap";

  // Wait for DOM to be ready
  document.addEventListener("DOMContentLoaded", () => {
    const banner = document.getElementById("announcement-banner");
    const scrollContent = document.getElementById("scroll-content");

    if (!banner || !scrollContent) {
      console.error("Banner elements not found");
      return;
    }

    let animation: gsap.core.Tween;

    const speed = banner.dataset.speed ? parseInt(banner.dataset.speed) : 100;

    // Function to start the animation
    const startAnimation = () => {
      // Get the width of one content instance (including margin)
      const firstChild = scrollContent.children[0];
      if (!firstChild) return;

      const contentWidth = (firstChild as HTMLElement).offsetWidth + 10; // 32px for mr-8 (2rem)

      // Set initial position
      gsap.set(scrollContent, { x: 0 });

      // Create infinite scroll animation
      animation = gsap.to(scrollContent, {
        x: -contentWidth,
        duration: contentWidth / speed,
        ease: "none",
        repeat: -1,
        onRepeat: () => {
          // Reset position for seamless loop
          gsap.set(scrollContent, { x: 0 });
        },
      });

      console.log("Animation started"); // Debug log
    };

    // Function to pause animation
    const pauseAnimation = () => {
      if (animation) {
        animation.pause();
        console.log("Animation paused"); // Debug log
      }
    };

    // Function to resume animation
    const resumeAnimation = () => {
      if (animation) {
        animation.resume();
        console.log("Animation resumed"); // Debug log
      }
    };

    // Event listeners for hover
    banner.addEventListener("mouseenter", pauseAnimation);
    banner.addEventListener("mouseleave", resumeAnimation);

    // Start the animation after a small delay to ensure elements are rendered
    setTimeout(startAnimation, 100);

    // Handle window resize
    let resizeTimeout: any;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (animation) {
          animation.kill();
        }
        startAnimation();
      }, 150);
    });
  });
</script>

<style>
  /* Ensure smooth scrolling and prevent content from wrapping */
  #scroll-content {
    will-change: transform;
  }

  /* Fade out edges for smooth visual effect */
  #announcement-banner::before,
  #announcement-banner::after {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    width: 20px;
    z-index: 10;
    pointer-events: none;
  }

  #announcement-banner::before {
    left: 0;
    background: linear-gradient(to right, currentColor, transparent);
    opacity: 0.1;
  }

  #announcement-banner::after {
    right: 0;
    background: linear-gradient(to left, currentColor, transparent);
    opacity: 0.1;
  }
</style>
